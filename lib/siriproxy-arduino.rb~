require 'cora'
require 'siri_objects'
require 'json'
require 'open-uri'
require 'httparty'
require 'json'
require 'scrapi'

Scraper::Base.parser :html_parser

class SiriProxy::Plugin::Arduino < SiriProxy::Plugin

  responses = ["One moment.", "Just a second.", "Just chill.", "Hang on a second.", "Hold on a second.", "Just a moment.", "Gimme a second."]

  def initialize(config = {})

    channel_item = Scraper.define do
	process "h3", :name => :text
	#process "div[2]", :time => :text
	#process "div[3]", :channel_info => :text
	process "div[position()=2]", :description => :text
	#process "div[5]", :additional_info => :text
    end

    @listings = Scraper.define do
	array :programs
	process "div.tvShow", :programs => channel_item
	result :programs   
    end

  end

  def change_channel(number)

    say "I'm changing the channel to: #{number}"

    Thread.new {

      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Something broke."
      else
	t.print "{channel,#{number}}"
	say "I changed the channel for you."
	t.close
      end

      request_completed 

    }

  end

  def show_info(channel)

    # valid channels:
    # 2 = (2)
  
    # 22 = (ABC2)
    if (channel == "22")
      channel = "ABC2"
    end

    # 23 = (ABC3)
    if (channel == "23")
      channel = "ABC3"
    end

    # 24 = (ABCN)
    if (channel == "24")
      channel = "ABCN"
    end
      
    # 7 = (7)
  
    # 72 = (7TWO)
    if (channel == "72")
      channel = "7TWO"
    end

    # 73 = (7MATE)
    if (channel == "73")
      channel = "7MATE"
    end
  
    # 9 = (9)
  
    # 99 = (GO)
    if (channel == "99")
      channel = "GO"
    end

    # 90 = (GEM)
    if (channel == "90")
      channel = "GEM"
    end

    # 1 = (ONE)
    if (channel == "1")
      channel = "ONE"
    end
  
    # 10 = (10)
    # 11 = (11)
  
    # 3 = (SBS)
    if (channel == "3")
      channel = "SBS"
    end

    # 32 = (SBS2)
    if (channel == "32")
      channel = "SBS2"
    end
  
    # 44 = (31)

    current_time_str = ""

    program_name = ""
    #program_time = ""
    #program_channel_info = ""
    program_description = ""
    #program_additional_info = ""

    say "Let me check."

    t = Time.new
    current_time = Time.local(t.year, t.month, t.day, t.hour, t.min/5*5)
    date_str = current_time.strftime("%d%m%Y")
    current_time_str = current_time.strftime("%l.%M+%p").downcase

    searching = true
    attempts = 0

    while searching do
      #die if we've tried too many times
      if attempts == 30
	say "Sorry, but I couldn't find anything."
	request_completed

	return
      end

      begin
	uri = URI.parse("http://www.ourguide.com.au/tv_guide_info.php?region=melbourne&state=VIC&date=#{date_str}&channel=#{channel}&time=#{current_time_str}")

	@listings.scrape(uri).each do |program|
	  program_name = program.name
	  #program_time = program.time unless program.time.nil?
	  #program_channel_info = program.channel_info unless program.channel_info.nil?
	  program_description = program.description
	  #program_additional_info = program.additional_info unless program.additional_info.nil?
	end

	searching = false
      rescue
	#didn't find info playing about the current show
	#so go back a half hour until
	#we find valid info from the start of the show
	current_time = current_time - (1 * 60)
	current_time_str = current_time.strftime("%l.%M+%p").downcase
	attempts += 1
      end
    end

    say "Here is what's playing:"
    
    object = SiriAddViews.new

    object.make_root(last_ref_id)
      
    answer = SiriAnswer.new(program_name, [
      SiriAnswerLine.new("logo","http://www.ourguide.com.au/images/station_images/#{channel}.png"),
      SiriAnswerLine.new(program_description)
    ])

    object.views << SiriAnswerSnippet.new([answer])
    
    send_object object

    response = ask "Would you like to watch it?"

    if(response =~ /yes/i)
      change_channel number
    else
      say "Good Choice."
    end

    request_completed     

  end

  def show_info_original(number)

    say "Let me check."
    
    Thread.new {
      
      t = Time.new

      #set the time to the current half hour block
      current_time = Time.local(t.year, t.month, t.day, t.hour, t.min/30*30).getutc

      channel = self.channels.select { |e| e[:channel].to_i.to_s == number }

      channel_id = channel[0][:id]

      searching = true

      attempts = 0
      
      #loop until a valid program is found
      while searching do

	#die if we've tried too many times
	if attempts == 10
	  say "Sorry, but I couldn't find anything."
	  request_completed

	  return
	end
	
	url = self.episode_prefix + channel_id + '_' + current_time.strftime("%Y-%m-%d_%HX%M")

	page = HTTParty.get(url).body rescue nil

	show_info = JSON.parse(page)

	if show['title'].nil?
	  #didn't find info playing about the current show
	  #so go back a half hour until
	  #we find valid info from the start of the show
	  current_time = current_time - (30 * 60)
	  attempts += 1
	else
	  searching = false
	end

      end

      say "Here is what's playing:"

      object = SiriAddViews.new
      
      object.make_root(last_ref_id)

      answer_content = Array.new(
	SiriAnswerLine.new('logo', self.image_prefix + channel_id + '.png'),
	SiriAnswerLine.new(show['title'])
      )

      answer_content << SiriAnswerLine.new(show['programDescription']) unless show['programDescription'].nil?

      answer = SiriAnswer.new(channel[0][:name], answer_content)

      object.views << SiriAnswerSnippet.new([answer])
      
      send_object object

      response = ask "Would you like to watch #{show['title']}"

      if(response =~ /yes/i)
	change_channel number
      else
	say "Good Choice."
      end
      
      request_completed 

    }

  end

  #Example: "Siri, turn the TV/amp/aircon on/off?"
  listen_for /(tv|amp|amplifier|aircon|air-conditioner) (off|on)/i do |device|

    # Say a random response:
    say responses[rand(responses.size)]

    Thread.new {
      
      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Ouch. Something just broke."
      else
	t.print "{power,#{device.downcase}}"
	# Say a random response.
	say "Sent power to the #{device}."
	t.close
      end

      request_completed 

    }

  end

  #Example: "Siri, can you change the source to Nintendo?"
  listen_for /source to (ps3|nintendo|xbox)/i do |source|

    # Say a random response:
    say responses[rand(responses.size)] 

    Thread.new {

      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Something went wrong."
      else
	t.print "{source,#{source.downcase}}"
	say "Source changed to #{source.upcase}."
	t.close
      end

      request_completed 

    }

  end

  #Example: "Siri, turn the volume up by 10."
  listen_for /volume up by ([0-9,]*[0-9])/i do |number|

    # Say a random response:
    say responses[rand(responses.size)] 

    Thread.new {

      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Something went wrong."
      else
	t.print "{volumeup,#{number}}"
	say "Volume turned up by #{number}."
	t.close
      end

      request_completed 

    }

  end

  #Example: "Siri, turn the volume down by 10."
  listen_for /volume down by ([0-9,]*[0-9])/i do |number|

    # Say a random response:
    say responses[rand(responses.size)] 

    Thread.new {

      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Something went wrong."
      else
	t.print "{volumedown,#{number}}"
	say "Volume turned down by #{number}."
	t.close
      end

      request_completed 

    }

  end

  #Example: "Siri, turn the volume up/down a little."
  listen_for /volume (up|down) a little bit/i do |volume|

    # Say a random response:
    say responses[rand(responses.size)] 

    Thread.new {

      begin
	t = TCPSocket.new("10.1.1.45", 8000)
      rescue
	say "Something went wrong."
      else
	t.print "{volume#{volume},8}"
	say "Volume turned #{volume} a little."
	t.close
      end

      request_completed 

    }

  end

  #Example: "Siri, what's on channel 25?"
  listen_for /on channel ([0-9,]*[0-9])/i do |number|
    
    show_info number
    
  end

  #Example: "Siri, what's on CNN?"
  #listen_for /on (#{self.custom_channels.join('|')})/i do |name|
    
    #show_info self.custom_channels[name.downcase]
    
  #end

  #Example: "Siri, can you change the channel to CNN?"
  #listen_for /channel to (#{self.custom_channels.join('|')})/i do |name|
    
    #change_channel self.custom_channels[name.downcase]
    
  #end

  #Example: "Siri, can you change channel to number 25?"
  listen_for /number ([0-9,]*[0-9])/i do |number|
    
    change_channel number
    
  end
  
end
